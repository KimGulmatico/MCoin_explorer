{"version":3,"file":"4.1d68dd29838bb0435d91.hot-update.js","sources":["webpack:///pages/index.js"],"sourcesContent":["import React from 'react'\r\nimport Router from 'next/router'\r\nimport Divider, { Button, Icon, Label, Menu, Table, Input } from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport Link from 'next/link'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nexport default class extends React.Component { \r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { \r\n      blocks: [], \r\n      transactions: [],\r\n      transactionAdrs: [],\r\n      transactionHash: [],\r\n      page:10,\r\n      index: null,\r\n      show: 'blocks',\r\n      search: '',\r\n      address: '',\r\n      safebalance: '',\r\n      confirmedbalance: '',\r\n      pendingbalance: '',\r\n      hash: '',\r\n      load: true,\r\n    }\r\n    this.getAllBlocks = this.getAllBlocks.bind(this);\r\n    this.srchChange = this.srchChange.bind(this); \r\n    this.search = this.search.bind(this);\r\n    this.getTransactionsandBalanceofAddress = this.getTransactionsandBalanceofAddress.bind(this);\r\n    this.getTransactionbyHash = this.getTransactionbyHash.bind(this);\r\n  }\r\n\r\n  // handling escape close\r\n  componentDidMount () {\r\n   this.getAllBlocks();\r\n  }\r\n\r\n  componentWillUnmount () {\r\n   \r\n  }\r\n\r\n  async getAllBlocks() {\r\n      const response = await axios.get('http://localhost:3001/blocks/');\r\n      if(response){\r\n        this.setState({\r\n          blocks: response.data,\r\n          show: 'blocks',\r\n          load: true,\r\n        })\r\n      }  \r\n      else{\r\n        this.setState({\r\n          load: false,\r\n        })\r\n      }   \r\n  }\r\n\r\n  async getBlocksTransactions(index) {\r\n      console.log(index);\r\n      const response = await axios.get('http://localhost:3001/blocks/'+index);\r\n      if(response){\r\n        this.setState({\r\n          transactions: response.data[0].transactions,\r\n        })\r\n      }     \r\n  }\r\n\r\n  async getTransactionsandBalanceofAddress(address) {\r\n      const response = await axios.get('http://localhost:3001/address/'+address+'/transactions');\r\n      if(response){\r\n        console.log(response.data);\r\n        this.setState({\r\n          transactionAdrs: response.data,\r\n        })\r\n      } \r\n\r\n      const balance = await axios.get('http://localhost:3001/address/'+address+'/balance');\r\n      if(balance){\r\n        console.log(balance.data);\r\n        this.setState({\r\n          safebalance: balance.data.safeBalance,\r\n          confirmedbalance: balance.data.confirmedBalance,\r\n          pendingbalance: balance.data.pendingBalance,\r\n          address: address\r\n        })\r\n      } \r\n  }\r\n\r\n  async getTransactionbyHash(txhash) {\r\n      const response = await axios.get('http://localhost:3001/transactions/'+txhash);\r\n      if(response){\r\n        console.log(response.data);\r\n        this.setState({\r\n          transactionHash: response.data,\r\n        })\r\n      }  \r\n  }\r\n\r\n\r\n\r\n  srchChange(e) {\r\n      this.setState({search: e.target.value})\r\n  }\r\n\r\n  search() {\r\n      if(!isNaN(this.state.search) && this.state.search != '' && this.state.search.length != 41){\r\n        this.getBlocksTransactions(this.state.search);\r\n        this.setState({show: 'transactions', index: this.state.search});\r\n      }\r\n      else if(this.state.search.length == 40 || this.state.search.length == 41){\r\n        this.getTransactionsandBalanceofAddress(this.state.search);\r\n        this.setState({show: 'transactionsAdrs'});\r\n      }\r\n      else if(this.state.search.length == 64){\r\n        this.getTransactionbyHash(this.state.search);\r\n        this.setState({show: 'transactionsHash', hash: this.state.search});\r\n      }\r\n      else if(this.state.search == ''){\r\n        alert('Fill out search box');\r\n      }\r\n      else{\r\n        console.log('Error');\r\n      }\r\n  }\r\n\r\n\r\n  render () {\r\n    \r\n    let allblocks = (\r\n                    <div style={{overflow: 'auto', 'max-width': '100%', 'margin-top': '15px'}}>\r\n                    <Table celled>\r\n                      <Table.Header>\r\n                        <Table.Row>\r\n                          <Table.HeaderCell>Index</Table.HeaderCell>\r\n                          <Table.HeaderCell>Transactions</Table.HeaderCell>\r\n                          <Table.HeaderCell>Difficulty</Table.HeaderCell>\r\n                          <Table.HeaderCell>MinedBy</Table.HeaderCell>\r\n                          <Table.HeaderCell>BlockDataHash</Table.HeaderCell>\r\n                          <Table.HeaderCell>Nonce</Table.HeaderCell>\r\n                          <Table.HeaderCell>Date Created</Table.HeaderCell>\r\n                          <Table.HeaderCell>BlockHash</Table.HeaderCell>\r\n                        </Table.Row>\r\n                      </Table.Header>\r\n                      <Table.Body>\r\n                      {\r\n                        this.state.load?<Loader type=\"TailSpin\" color=\"gray\" height={50} width={50}/>:\r\n                        this.state.blocks.map((block) => \r\n                          (parseInt(block.index) <= this.state.page)?\r\n                            <Table.Row key={block.index}>\r\n                              <Table.Cell>{block.index}</Table.Cell>\r\n                              <Table.Cell><p style={{color: '#3498db'}} onClick={()=>{this.setState({index: block.index, show: 'transactions'}); this.getBlocksTransactions(block.index)}}>{block.transactions.length}</p></Table.Cell>\r\n                              <Table.Cell>{block.difficulty}</Table.Cell>\r\n                              <Table.Cell>{block.minedBy}</Table.Cell>\r\n                              <Table.Cell>{block.blockDataHash}</Table.Cell>\r\n                              <Table.Cell>{block.nonce}</Table.Cell>\r\n                              <Table.Cell>{block.dateCreated}</Table.Cell>\r\n                              <Table.Cell>{block.blockHash}</Table.Cell>\r\n                            </Table.Row>\r\n                            :null)\r\n                      }\r\n                      </Table.Body>\r\n                      <Table.Footer>\r\n                        <Table.Row>\r\n                          <Table.HeaderCell colSpan='8'>\r\n                            <Menu floated='right' pagination>\r\n                              <Menu.Item as='a' icon>\r\n                                <Icon name='chevron left' />\r\n                              </Menu.Item>\r\n                              <Menu.Item as='a'>1</Menu.Item>\r\n                              {\r\n                              this.state.blocks.map((block) => {\r\n                                if(parseInt(block.index) == this.state.page){\r\n                                  <Menu.Item as='a'>{block.index + 1}</Menu.Item>\r\n                                  //this.setState({page: this.state.page+10})\r\n                                }\r\n                                null\r\n                              })\r\n                              }\r\n                              <Menu.Item as='a' icon>\r\n                                <Icon name='chevron right' />\r\n                              </Menu.Item>\r\n                            </Menu>\r\n                          </Table.HeaderCell>\r\n                        </Table.Row>\r\n                      </Table.Footer>\r\n                    </Table>\r\n                    </div>);\r\n\r\n    let transactions = (\r\n                        <div style={{overflow: 'auto', 'max-width': '100%', 'margin-top': '15px'}}>\r\n                        <h3>Transactions for Block: {this.state.index}</h3>\r\n                        <Table celled>\r\n                          <Table.Header>\r\n                            <Table.Row>\r\n                              <Table.HeaderCell>From</Table.HeaderCell>\r\n                              <Table.HeaderCell>To</Table.HeaderCell>\r\n                              <Table.HeaderCell>Value</Table.HeaderCell>\r\n                              <Table.HeaderCell>Fee</Table.HeaderCell>\r\n                              <Table.HeaderCell>Date created</Table.HeaderCell>\r\n                              <Table.HeaderCell>Data</Table.HeaderCell>\r\n                              <Table.HeaderCell>Sender public key</Table.HeaderCell>\r\n                              <Table.HeaderCell>Status</Table.HeaderCell>\r\n                              <Table.HeaderCell>Data hash</Table.HeaderCell>\r\n                            </Table.Row>\r\n                          </Table.Header>\r\n                          <Table.Body>\r\n                          {\r\n                            this.state.transactions.map((trans) => \r\n                                <Table.Row>\r\n                                  <Table.Cell>{trans.from}</Table.Cell>\r\n                                  <Table.Cell>{trans.to}</Table.Cell>\r\n                                  <Table.Cell>{trans.value}</Table.Cell>\r\n                                  <Table.Cell>{trans.fee}</Table.Cell>\r\n                                  <Table.Cell>{trans.dateCreated}</Table.Cell>\r\n                                  <Table.Cell>{trans.data}</Table.Cell>\r\n                                  <Table.Cell>{trans.senderPubKey}</Table.Cell>\r\n                                  <Table.Cell>{trans.transferSuccessful}</Table.Cell>\r\n                                  <Table.Cell>{trans.transactionDataHash}</Table.Cell>\r\n                                </Table.Row>)\r\n                          }\r\n                          </Table.Body>                      \r\n                        </Table>\r\n                        </div>);\r\n\r\n    let transactionsAdrs = (\r\n                      <div style={{'margin-top': '15px'}}>\r\n                      <h3>Address: {this.state.address}</h3>\r\n                      <h4>Safe balance: {this.state.safebalance}</h4>\r\n                      <h4>Confirmed balance: {this.state.confirmedbalance}</h4>\r\n                      <h4>Pending balance: {this.state.pendingbalance}</h4>\r\n                      <h3>Transactions</h3>\r\n                      <div style={{overflow: 'auto', 'max-width': '100%'}}>\r\n                      <Table celled>\r\n                        <Table.Header>\r\n                          <Table.Row>\r\n                            <Table.HeaderCell>From</Table.HeaderCell>\r\n                            <Table.HeaderCell>To</Table.HeaderCell>\r\n                            <Table.HeaderCell>Value</Table.HeaderCell>\r\n                            <Table.HeaderCell>Fee</Table.HeaderCell>\r\n                            <Table.HeaderCell>Date created</Table.HeaderCell>\r\n                            <Table.HeaderCell>Data</Table.HeaderCell>\r\n                            <Table.HeaderCell>Sender public key</Table.HeaderCell>\r\n                            <Table.HeaderCell>Status</Table.HeaderCell>\r\n                            <Table.HeaderCell>Data hash</Table.HeaderCell>\r\n                          </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                        {\r\n                          this.state.transactionAdrs.map((trans) => \r\n                              <Table.Row>\r\n                                <Table.Cell>{trans.from}</Table.Cell>\r\n                                <Table.Cell>{trans.to}</Table.Cell>\r\n                                <Table.Cell>{trans.value}</Table.Cell>\r\n                                <Table.Cell>{trans.fee}</Table.Cell>\r\n                                <Table.Cell>{trans.dateCreated}</Table.Cell>\r\n                                <Table.Cell>{trans.data}</Table.Cell>\r\n                                <Table.Cell>{trans.senderPubKey}</Table.Cell>\r\n                                <Table.Cell>{trans.transferSuccessful}</Table.Cell>\r\n                                <Table.Cell>{trans.transactionDataHash}</Table.Cell>\r\n                              </Table.Row>)\r\n                        }\r\n                        </Table.Body>                      \r\n                      </Table>\r\n                      </div>\r\n                      </div>);     \r\n                      \r\n    let transactionsbyhash = (\r\n                        <div style={{'margin-top': '15px'}}>\r\n                        <h3>Transaction Hash: {this.state.hash}</h3>\r\n                        <div style={{overflow: 'auto', 'max-width': '100%'}}>\r\n                        <Table celled>\r\n                          <Table.Header>\r\n                            <Table.Row>\r\n                              <Table.HeaderCell>From</Table.HeaderCell>\r\n                              <Table.HeaderCell>To</Table.HeaderCell>\r\n                              <Table.HeaderCell>Value</Table.HeaderCell>\r\n                              <Table.HeaderCell>Fee</Table.HeaderCell>\r\n                              <Table.HeaderCell>Date created</Table.HeaderCell>\r\n                              <Table.HeaderCell>Data</Table.HeaderCell>\r\n                              <Table.HeaderCell>Sender public key</Table.HeaderCell>\r\n                              <Table.HeaderCell>Status</Table.HeaderCell>\r\n                              <Table.HeaderCell>Data hash</Table.HeaderCell>\r\n                            </Table.Row>\r\n                          </Table.Header>\r\n                          <Table.Body>\r\n                          {\r\n                                <Table.Row>\r\n                                  <Table.Cell>{this.state.transactionHash.from}</Table.Cell>\r\n                                  <Table.Cell>{this.state.transactionHash.to}</Table.Cell>\r\n                                  <Table.Cell>{this.state.transactionHash.value}</Table.Cell>\r\n                                  <Table.Cell>{this.state.transactionHash.fee}</Table.Cell>\r\n                                  <Table.Cell>{this.state.transactionHash.dateCreated}</Table.Cell>\r\n                                  <Table.Cell>{this.state.transactionHash.data}</Table.Cell>\r\n                                  <Table.Cell>{this.state.transactionHash.senderPubKey}</Table.Cell>\r\n                                  <Table.Cell>{this.state.transactionHash.transferSuccessful}</Table.Cell>\r\n                                  <Table.Cell>{this.state.transactionHash.transactionDataHash}</Table.Cell>\r\n                                </Table.Row>\r\n                          }\r\n                          </Table.Body>                      \r\n                        </Table>\r\n                        </div>\r\n                        </div>);\r\n\r\n    return (\r\n      <div>\r\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\" integrity=\"sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4\" crossOrigin=\"anonymous\"/>\r\n\t\t    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.12/semantic.min.css\"></link>\r\n        <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\" integrity=\"sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp\" crossOrigin=\"anonymous\"/>\r\n        <link href=\"https://fonts.googleapis.com/css?family=Baloo+Chettan|Paytone+One\" rel=\"stylesheet\"/>\r\n        <div className=\"container\" style={{'max-width': '97%'}}>\r\n        <div className=\"row\" style={{'margin-top': '14px'}}>\r\n          <div className=\"col-sm-6\">\r\n          <div style={{height: '6px'}}>\r\n          </div>\r\n          <span onClick={this.getAllBlocks} style={{'font-family': 'Paytone One', 'font-size': '40px', 'height': '200px'}}>Mccoin Explorer</span>\r\n          </div>\r\n          <div className=\"col-sm-6\">\r\n            <div className=\"container\" style={{'margin-right': '0'}}>\r\n            <div className=\"row\">\r\n            <div className=\"col-9\">\r\n            <Input fluid placeholder='Search by Block Number/ Address/ TxHash' onChange={this.srchChange}/>\r\n            </div>\r\n            <div className=\"col-3\" style={{'padding': '0'}}>\r\n            <Button secondary style={{'width': '100%'}} onClick={this.search}>Search</Button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.state.show == 'blocks'?allblocks:this.state.show == 'transactions'?transactions:this.state.show == 'transactionsAdrs'?transactionsAdrs:transactionsbyhash}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// pages/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AAtBA;AAuBA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;;;;;;;;;;;;;AAKA;AACA;;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;;AACA;AACA;;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;;AADA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;AACA;AACA;;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;;AADA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;AAIA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAVA;AAeikvUA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}